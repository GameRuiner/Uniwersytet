#lang racket

(define (square x) (* x x))

(define (cont-frac num den k)
  (define (iter s)
    (if (> s k)
        (/ (num s) (den s))
        (/ (num s) (+ (den s) (iter (+ s 1))))))
  (iter 1))

(define (approx  x)
  (define (dem8 i)
  (- (* i 2) 1))
  (define (num8 i )
    (if (= i 1)
       x
      (square  (* (- i 1) x) )))
  (define (An resA oldresA n)
    (+ (* (dem8 n) resA) (* (num8 n) oldresA)))
  (define (Bn resB oldresB n)
    (+ (* (dem8 n) resB) (* (num8 n) oldresB)))
  (define (fn An Bn)
    (/ An Bn)) 
  (define (goodenough? resA resB oldresA oldresB n)
    (if (< (abs (- (fn resA resB) (fn oldresA oldresB))) 0.001)
        (cont-frac num8 dem8 n)
        (let ((tresa resA)
               (tresb resB)
               (resA (An resA oldresA n))
               (resB (Bn resB oldresB n)))
         (goodenough? resA resB tresa tresb (+ n 1)))))
  (define A1 (An 0 1 1))
  (define A2 (An A1 0 2))
  (define B1 (Bn 1 0 1))
  (define B2 (Bn B1 1 2))
  (goodenough? A2 B2 A1 B1 3))

(approx 1.0)
(atan 1)
(approx 0)
(atan 0)
(approx -1.0)
(atan -1)
(atan -12)
(approx -12.0)
