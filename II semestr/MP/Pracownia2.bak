#lang racket
(define (square x) (* x x))
(define (inc x) (+ x 1))
(define (compose f g) (lambda (x) (f (g x))))
(define (identity x) (x))
; zadanie3
(define (repeated p n)
  (if (= n  0)
      identity
      (compose p (repeated p  (- n 1))
      p)))
;zadanie4
(define product
  (lambda (term next s e)
    (if (> s e)
        1
        (* (term s) (product term next (next s) e)))))

(define iproduct
  (lambda ( res term next s e)
    (if (> s e)
        res
        (iproduct  (* res (term s)) term next (next s) e))))

(define (term x)
  (* (/ (- x 1) x) (/ (+ x 1) x)))

(define (next x)
  (+ x 2))

;zadanie5
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a) (accumulate  combiner null-value term (next a) next b))))

(define (iaccumulate combiner null-value term a next b)
  (define (iter res a)
    (if (> a b)
        res
        (iter (combiner res (term a)) (next a))))
  (iter null-value a))

;zadanie6
(define (cont-frac num den k)
  (define (iter s)
    (if (> s k)
        (/ (num s) (den s))
        (/ (num s) (+ (den s) (iter (+ s 1))))))
  (iter 0))
(cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 10)